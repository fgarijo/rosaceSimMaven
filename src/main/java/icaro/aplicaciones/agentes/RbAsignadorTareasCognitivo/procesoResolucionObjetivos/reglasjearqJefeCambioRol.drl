import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.aplicaciones.InfoSimulador.informacion.*;
import icaro.aplicaciones.InfoSimulador.tareasComunes.*;
import icaro.aplicaciones.InfoSimulador.objetivosComunes.*;
import icaro.aplicaciones.agentes.RbIgualitarioNCognitivo.informacion.*;
import icaro.aplicaciones.agentes.RbIgualitarioNCognitivo.objetivos.*;
import icaro.aplicaciones.agentes.RbIgualitarioNCognitivo.tareas.*;
import icaro.aplicaciones.agentes.RbAsignadorTareasCognitivo.tareas.*;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;

import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
global MisObjetivos objetivosDecision;
global MisObjetivos objetivosAccion;
global VictimsToRescue victimsArescatar;
global InfoEquipo miEquipo;

//Primera regla que se ejecutara. Solo se debe disparar una vez.
// Suponemos que el este componente es un robot como el resto del equipo
rule "Generacion de componentes internos"
 when
    not ( exists(InfoCompMovimiento()))
 then
   TareaSincrona tarea3 = gestorTareas.crearTareaAsincrona(CrearComponentesInternos.class);
   tarea3.ejecutar( );             
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
end
rule "Acciones Iniciales"
 when
    infoCompmov: (InfoCompMovimiento())
    miStatus: RobotStatus1(idRobot == agentId)
    not ( exists(Focus()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMemCRN1.class);
   tarea1.ejecutar(VocabularioRosace.IdentRolAgtesIgualitarios,infoCompmov,miStatus );           
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
end

rule "Generacion Objetivo Conocer MiEquipo y contacto con posibles miembros"
when
    miStatus: RobotStatus1(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
    focoActual : Focus(foco == null)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ContactarMiembrosEquipo.class);
    tarea.ejecutar(miStatus,miEquipo,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end

rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
salience 15
when   
    infoRolRecibido: InfoRolAgente( misionEquipo:refIteracion)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING,misionId==misionEquipo)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso Peticion confirmar equipo envio mi rol "
salience 15
when   
    miStatus: RobotStatus1(idRobot == agentId)
    peticionConfEquipo: PeticionConfirmarEquipo( identObjectRefPeticion==VocabularioRosace.IdentMisionEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING,misionId==VocabularioRosace.IdentMisionEquipo)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPeticionConfirmRolenEquipo.class);
    tarea.ejecutar(miStatus,peticionConfEquipo,miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera
rule "Proceso timeout 1 para conseguir Objetivo Conocer MiEquipo "
when   
    not ( exists PeticionConfirmarEquipo(identAgente == agentId))
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConfirmarMiembrosEquipo.class);
    tarea.ejecutar(infoTarea,miEquipo,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso timeout 2 para conseguir Objetivo Conocer MiEquipo "
when   
 //   peticionConf:PeticionConfirmarEquipo(identAgente == agentId)
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutConfirmarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    modify ( obj1 ){
        setState(Objetivo.SOLVED)
        };
        retract(infoTarea);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end

rule "Inicio proceso de decision despues de conseguir contactar con mi equipo "
// Se ha contactado al equipo y se han recibido ordenes del CC pero no hay decisiones en curso
no-loop true
when   
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
    focoActual : Focus(foco==obj1)
    Victim(idVict:name,isCostEstimated==false)
    not (exists (DecidirQuienVa(state == Objetivo.SOLVING,objectDecisionId == idVict)))
    
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(GenerarDecisionyFocalizar.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(objetivosDecision,focoActual,null ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName()  +"\n");       
end

rule " OrdCC1 : Interpreto la orden del CC cuando llegue"
 when
    miStatus: RobotStatus1(idRobot == agentId,bloqueado==false )
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
   focoActual : Focus()
    ccOrden:OrdenCentroControl(mensajeOrden == VocabularioRosace.MsgOrdenCCAyudarVictima,victim:justificacion )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InterpretarOdenDelCC2.class);
    tarea.ejecutar(ccOrden,objetivosDecision,miStatus,miEquipo,victimsArescatar,focoActual); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    System.out.println( "\n"+agentId + "Foco: NULL " +" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());      
end
rule " Proceso informacion sobre rescate de victima "
no-loop true
when
    miStatus: RobotStatus1(idRobot == agentId,bloqueado==false )
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
    victimaCC:Victim(idVict:name)
    infoRescate: InfoAgteVictimaRescatada(victimId == idVict)
    focoActual : Focus()
then
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName()  +"\n");    
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoVictimaRescatada.class); 
    tarea.ejecutar(infoRescate,miEquipo,victimsArescatar,focoActual ); 
end
rule "OrdCCParada1 :Proceso una orden de parada  enviada por el CC "
salience 10
no-loop true
when   
    miStatus: RobotStatus1(idRobot == agentId)
   infoCompmov: (InfoCompMovimiento())
   victimaCC:Victim(idVict:name) 
    not (exists ( InfoParaDecidirQuienVa()))
    ccOrden:OrdenParada(mensajeOrden == VocabularioRosace.MsgeOrdenParar)
 then
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenParada.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miStatus,infoCompmov,ccOrden,miEquipo,null,objetivosDecision ); 
       
end
rule "OrdCC3 :Proceso una orden de fin de caso simulacion enviada por el CC  "
salience 15
when   
   infoCompmov: (InfoCompMovimiento())
    ccOrden:OrdenFinCasoSimulacion(mensajeOrden == VocabularioRosace.MsgOrdenCCFinalizarCasoSimulacion)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenFinCasoSimulacion.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoCompmov ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "ProcInfoEstadoRobot1 :Procesar informacion sobre estado bloqueado enviado por un robot  "
salience 15
when
   miStatus: RobotStatus1()   
   infoEstadoRobot: InfoEstadoAgente(bloqueado==true)
    focoActual:Focus()
 not (exists ( InfoParaDecidirQuienVa()))
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoEstadoAgenteEqJerarquico.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoEstadoRobot,victimsArescatar,null,null,objetivosDecision,miStatus,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "ProcInfoEstadoRobot2 :Procesar informacion estado bloqueado robot durante proceso de decision "
salience 20
when 
    miStatus: RobotStatus1()
    victimaCC:Victim(idVict:name) 
   infoEstadoRobot:InfoEstadoAgente(bloqueado==true)
   objDec: DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == objDec)
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoEstadoAgenteEqJerarquico.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoEstadoRobot,victimsArescatar,objDec,infoDecision,objetivosDecision,miStatus,focoActual  ); 
    System.out.println( "\n"+agentId +"( ID Victima: "+idVict +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict +" EJECUTO LA REGLA: " + drools.getRule().getName());      
end
//==========================================================================
//   Reglas del ciclo de vida del objetivo AyudarVictima  
//           
//==========================================================================
//
//-------------------------------------------------------
//   Reglas de focalizacion en objetivo DecidirQuienVa
//-------------------------------------------------------
rule "Focalizacion inicial en el  objectivo  para decidir quien se hace cargo de la ayuda"
 when
    focoActual : Focus(foco == null)   
    victimaCC:Victim($idVict:name)
    obj1 : AyudarVictima(state == Objetivo.PENDING, victimId == $idVict) 
    obj :DecidirQuienVa(state == Objetivo.SOLVING, objectReferenceId == $idVict) 
 then
    modify ( focoActual ){
        setFoco(obj)
        };
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+$idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
   
end

rule " Foc4: Focalizacion en una nueva decision e inicio de ayuda a victima "
 when
    victimaCC:Victim(idVict:name)
    estatusRobot :RobotStatus1(bloqueado==false)
    objAcc :AyudarVictima(state == Objetivo.PENDING, victimId == idVict)   
    objDec: DecidirQuienVa (state == Objetivo.SOLVED,objectDecisionId == idVict )
    focoActual:Focus(foco == objDec)
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict)
 then 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ActualizarObjsAccionyDecision1.class);
    tarea.ejecutar(objetivosAccion,objetivosDecision, objAcc,infoDecision,focoActual, estatusRobot, victimaCC,victimsArescatar);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end
rule " Inicio de ayuda a victima tras conseguir objetivo decision con obj accion Focalizado"
 when
    victimaCC:Victim(idVict:name)
    estatusRobot :RobotStatus1(bloqueado==false)
    objAcc :AyudarVictima(state == Objetivo.PENDING, victimId == idVict)   
    objDec: DecidirQuienVa (state == Objetivo.SOLVED,objectDecisionId == idVict )
    focoActual:Focus(foco == objAcc)
 then 
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(IniciarSalvamentoVictimaAsignada.class);
    tarea.ejecutar(objetivosAccion,focoActual, victimaCC,estatusRobot,victimsArescatar);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    System.out.println( "\n"+agentId + "Foco: Estoy en  el objetivo "+focoActual.toString()+" \n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

//==========================================================================
//   Reglas del ciclo de vida de la consecucion del objetivo DecidirQuienVa 
//           
//==========================================================================
//

rule "Comenzar la consecucion del objetivo DecidirQuienVa primera vez"

  when
    victimaCC:Victim(idVict:name,isCostEstimated==false)  
    AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict)
    focoActual:Focus(foco == obj )
    not (exists ( InfoParaDecidirQuienVa(idElementoDecision == idVict)))
  then
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoParaDecidir.class); //mete en el motor un InfoParaDecidirQuienVa inicializado
     tarea.ejecutar(miEquipo,idVict );
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

//===================================================================================================================================

rule "Pido la evaluacion para realizar el objetivo al equipo de robots "
no-loop true
  when
    victimaCC:Victim(idVict:name)
    obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    miStatus: RobotStatus1()
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict,hanLlegadoTodasLasEvaluaciones== false, miEvaluacionEnviadaAtodos == false )
    then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvalAtodos.class);
    tarea.ejecutar(infoDecision,victimaCC,victimsArescatar,miStatus, focoActual);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +"EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );

 end
rule " Si me llegan  evaluaciones de otros agentes las proceso hasta que las tenga todas"
salience 20
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict, miEvaluacionEnviadaAtodos == true, hanLlegadoTodasLasEvaluaciones == false, tengoLaMejorEvaluacion== false )
    evalRecibida:EvaluacionAgente(identAgente != agentId,objectEvaluationId ==idVict )
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarEvaluacionRecibida.class); ;
    tarea.ejecutar(obj,infoDecision,evalRecibida );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +"( ID Victima: "+idVict + " ) EJECUTO LA REGLA "+drools.getRule().getName()+" \n\n" );

end
rule " Si tengo todas la   evaluaciones asigno el objetivo al agte de mejor evaluacion"
no-loop true
 when
    victimaCC:Victim(idVict:name)   
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == false, hanLlegadoTodasLasEvaluaciones == true)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(miEquipo,infoDecision);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
 //   depuracion4(agentId,idVict, drools.getRule().getName(), recursoTrazas);     
end

rule "Proceso el primer timeout respuestas pido las respuestas que me faltan"
  when
     victimaCC:Victim(idVict:name)   
 //    exists  AyudarVictima(state == Objetivo.SOLVING,victimId == idVict)
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict,miEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones1, contenidoInforme==idVict )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(PedirEvaluacionesQueFaltan.class);
    tarea.ejecutar(obj,infoDecision,victimaCC ); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Proceso el segundo timeout respuestas decido a quien asigno el objetivo"
  when
     victimaCC:Victim(idVict:name)   
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     Focus(foco == obj)
     infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict,miEvaluacionEnviadaAtodos == true,hanLlegadoTodasLasEvaluaciones == false)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirEvaluaciones2, contenidoInforme==idVict )              
 then
    // Les pido a  los agentes que me faltan  su evaluacion
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarPropuestaAlMejorParaQueRealiceObjetivo.class);
    tarea.ejecutar(obj,infoDecision,victimaCC ); 
    retract (informeTarea2);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule " Si el agente de mejor evaluacion acepta la propuesta resuelvo el objetivo"
 when
    victimaCC:Victim(idVict:name)
    obj1:AyudarVictima(state == Objetivo.PENDING,victimId == idVict)
    obj:DecidirQuienVa (state == Objetivo.SOLVING,objectDecisionId == idVict )
    focoActual:Focus(foco == obj )
    infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
    aceptPropuesta :AceptacionPropuesta(identAgente != agentId,identObjectRefAcetPropuesta ==idVict )
 then
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarAceptacionPropuestaAyudaVictima.class);
    tarea.ejecutar(obj,aceptPropuesta,infoDecision,objetivosDecision,victimsArescatar,focoActual );    
end
rule "Proceso el  timeout aceptacion propuesta asigno la tarea a otro robot"
  when
     victimaCC:Victim(idVict:name)
     obj:DecidirQuienVa(state==Objetivo.SOLVING,objectDecisionId == idVict)
     focoActual:Focus(foco == obj)
     infoDecision: InfoParaDecidirQuienVa(idElementoDecision == idVict, heInformadoAlmejorParaQueAsumaElObjetivo == true)
     informeTarea2:InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutRecibirConfirmacionRealizacionObjetivo1, contenidoInforme==idVict )              
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarTimeoutRecibirConfirmacionRealizacionObjetivo.class);
    tarea.ejecutar(infoDecision,informeTarea2, focoActual,victimsArescatar );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
end

rule "Tratamiento Informe victima rescatada Consecucion del  objetivo Ayudar a la victima "
no-loop true
when
    obj:AyudarVictima(state == Objetivo.SOLVING, idVict:victimId)
    infoCompMov:InfoCompMovimiento()
    miStatus: RobotStatus1()
    focoActual:Focus()
    informe: Informe ( referenciaContexto == idVict,contenidoInforme == VocabularioRosace.MsgeLlegadaDestino)
 then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInformeLlegadaDestino.class);
 tarea.ejecutar(objetivosAccion,victimsArescatar,focoActual,miStatus,infoCompMov,informe,obj,miEquipo );
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end
rule "Proceso una orden de fin de caso simulacion enviada por el CC  "
salience 10
when   
   infoCompmov: (InfoCompMovimiento())
   ccOrden:OrdenFinCasoSimulacion(identEmisor==VocabularioRosace.IdentAgteControladorSimulador,mensajeOrden == VocabularioRosace.MsgOrdenCCFinalizarCasoSimulacion)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenFinCasoSimulacion.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoCompmov ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end
