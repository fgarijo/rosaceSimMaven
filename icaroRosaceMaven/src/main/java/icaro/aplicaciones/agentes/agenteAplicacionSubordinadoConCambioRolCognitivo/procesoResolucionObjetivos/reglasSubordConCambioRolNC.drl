import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Rosace.informacion.*;
import icaro.aplicaciones.Rosace.tareasComunes.*;
import icaro.aplicaciones.Rosace.objetivosComunes.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.informacion.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.objetivos.*;
import icaro.aplicaciones.agentes.agenteAplicacionSubordinadoConCambioRolCognitivo.tareas.*;
import icaro.aplicaciones.agentes.agenteAplicacionrobotIgualitarioNCognitivo.informacion.*;
//import icaro.aplicaciones.agentes.agenteAplicacionrobotIgualitarioNCognitivo.tareas.*;
import icaro.aplicaciones.agentes.componentesInternos.movimientoCtrl.*;
// se utilizan los objetivos y las tareas del Agente Subordinado y se incorporan nuevos objetivos, tareas y clases
import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
global MisObjetivos objetivosDecision;
global MisObjetivos objetivosAccion;
global VictimsToRescue victimsArescatar;
global InfoEquipo miEquipo;

rule "Generacion de componentes internos"
 when
    not ( exists(InfoCompMovimiento()))
 then
   TareaSincrona tarea3 = gestorTareas.crearTareaAsincrona(CrearComponentesInternos.class);
   tarea3.ejecutar( );             
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
end
rule "Acciones Iniciales"
 when
    infoCompmov: (InfoCompMovimiento())
    miStatus: RobotStatus1(idRobot == agentId)
    not ( exists(Focus()))
 then
   TareaSincrona tarea1 = gestorTareas.crearTareaSincrona(InicializarInfoWorkMemCRN1.class);
   tarea1.ejecutar(VocabularioRosace.IdentRolAgtesSubordinados,infoCompmov,miStatus );           
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
end

rule "Generacion Objetivo Conocer MiEquipo y contacto con posibles miembros"
when
    miStatus: RobotStatus1(idRobot == agentId)
    not (exists (DefinirMiEquipo()))
    focoActual : Focus(foco == null)
then
    gestorTareas.ejecutar(ContactarMiembrosEquipo.class,miStatus,miEquipo,focoActual );
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end

rule "Proceso InfoRol para conseguir Objetivo Conocer MiEquipo "
salience 15
when   
    infoRolRecibido: InfoRolAgente( misionEquipo:refIteracion)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING,misionId==misionEquipo)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoRolAgente.class);
    tarea.ejecutar(miEquipo,infoRolRecibido); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso Peticion confirmar equipo envio mi rol "
salience 15
when   
    miStatus: RobotStatus1(idRobot == agentId)
    peticionConfEquipo: PeticionConfirmarEquipo( identObjectRefPeticion==VocabularioRosace.IdentMisionEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING,misionId==VocabularioRosace.IdentMisionEquipo)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPeticionConfirmRolenEquipo.class);
    tarea.ejecutar(miStatus,peticionConfEquipo,miEquipo); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
// consecucion del objetivo DefinirMiEquipo
// El objetivo se considera conseguido si tengo todas las respuestas posibles o si llega el informe timeout de espera
rule "Proceso timeout 1 para conseguir Objetivo Conocer MiEquipo "
when   
    not ( exists PeticionConfirmarEquipo(identAgente == agentId))
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutContactarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ConfirmarMiembrosEquipo.class);
    tarea.ejecutar(infoTarea,miEquipo,focoActual ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());     
end
rule "Proceso timeout 2 para conseguir Objetivo Conocer MiEquipo "
when   
    infoTarea: InformeDeTarea(identTarea == VocabularioRosace.IdentTareaTimeOutConfirmarMiembrosEquipo)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVING)
    focoActual : Focus(foco == obj1)
then
// se da por conseguido el objetivo 
    modify ( obj1 ){
        setState(Objetivo.SOLVED)
        };
        retract(infoTarea);
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName()+ " Se consigue el objetivo DefinirMiEquipo y su estatus es : "
    + obj1.getState() + " El foco esta en : " + focoActual );     
end

rule "Si me llega una peticion de envio de mi evaluacion del jefe del equipo  la calculo y se la mando"
salience 10
 when    
    miStatus: RobotStatus1(idRobot == agentId)
    obj1 : DefinirMiEquipo(state == Objetivo.SOLVED)
    focoActual : Focus()
    peticionAgte: PeticionAgente( mensajePeticion == VocabularioRosace.MsgPeticionEnvioEvaluaciones, identAgente == VocabularioRosace.IdentAgteJefeEquipo)            
  then
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
     System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(MandarEvaluacionAlAgteAsignador.class);
     tarea.ejecutar(peticionAgte,miStatus,victimsArescatar);     
end

rule "Procesar propuesta para que asuma el objetivo cuando no tengo objetivo focalizado "
   when
      miStatus: RobotStatus1(idRobot == agentId)
      victimaCC:Victim(idVict:name)   
      propuesta:PropuestaAgente (msgPropuesta:mensajePropuesta == VocabularioRosace.MsgPropuesta_Para_Aceptar_Objetivo,identObjectRefPropuesta == idVict)
      not( exists ( AceptacionPropuesta(propuestaAceptada == propuesta  )))
   then
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"  EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" ); 
      TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarPropuestaParaAsumirObjetivo.class);
      tarea.ejecutar(miStatus,objetivosAccion,victimsArescatar,propuesta );                    
end

rule "Si he aceptado la propuesta para asumir el objetivo lo genero y encolo"
salience 10
no-loop true
   when
      victimaCC:Victim(idVict:name)   
        focoActual : Focus()
      estatusRobot:RobotStatus1()
      acPropuesta:AceptacionPropuesta (identAgente == agentId,identObjectRefAcetPropuesta == idVict)
   then
      gestorTareas.ejecutar(GeneraryEncolarObjetivoActualizarFocoNC1.class,objetivosAccion,focoActual,victimaCC,acPropuesta,estatusRobot,victimsArescatar );
      recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
      System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+" \n\n" );                     
end

rule "Tratamiento Informe victima rescatada Consecucion del  objetivo Ayudar a la victima "
no-loop true
when
    obj:AyudarVictima(state == Objetivo.SOLVING, idVict:victimId)
    infoCompMov:InfoCompMovimiento()
    miStatus: RobotStatus1()
    focoActual:Focus()
    informe: Informe ( referenciaContexto == idVict,contenidoInforme == VocabularioRosace.MsgeLlegadaDestino)
 then
 TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInformeLlegadaDestino.class);
 tarea.ejecutar(objetivosAccion,victimsArescatar,focoActual,miStatus,infoCompMov,informe,obj,miEquipo );
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"( ID Victima: "+idVict + " ) EJECUTO LA REGLA " + drools.getRule().getName() + "\n");
end

rule "Proceso una orden de fin de caso simulacion enviada por el CC  "
salience 10
when   
   infoCompmov: (InfoCompMovimiento())
    ccOrden:OrdenFinCasoSimulacion(identEmisor==VocabularioRosace.IdentAgteControladorSimulador,mensajeOrden == VocabularioRosace.MsgOrdenCCFinalizarCasoSimulacion)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenFinCasoSimulacion.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoCompmov ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end
//==========================================================================
//   Reglas   del objetivo Parar Robot  : Ciclo de vida
//           
//==========================================================================
//
rule "ProcInfoEstadoRobot1 :Procesar informacion sobre estado bloqueado enviado por un robot  "
salience 15
when
   miStatus: RobotStatus1()   
   infoEstadoRobot: InfoEstadoAgente(bloqueado==true)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarInfoEstadoAgenteEqJerarquico.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoEstadoRobot,victimsArescatar,null,miStatus ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());      
end

rule "OrdCCParada1 :Proceso una orden de parada  enviada por el CC "
salience 10
no-loop true
when   
    miStatus: RobotStatus1(idRobot == agentId)
   infoCompmov: (InfoCompMovimiento())
   victimaCC:Victim(idVict:name) 
    ccOrden:OrdenParada(mensajeOrden == VocabularioRosace.MsgeOrdenParar)
 then
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"\n"+" EJECUTO LA REGLA: " + drools.getRule().getName());   
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenParada.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miStatus,infoCompmov,ccOrden,miEquipo,null,objetivosDecision ); 
       
end

rule "OrdCC3 :Proceso una orden de fin de caso simulacion enviada por el CC  "
salience 15
when   
   infoCompmov: (InfoCompMovimiento())
    ccOrden:OrdenFinCasoSimulacion(mensajeOrden == VocabularioRosace.MsgOrdenCCFinalizarCasoSimulacion)
 then
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ProcesarOrdenFinCasoSimulacion.class); //crea el  objetivo ayudar victima
    tarea.ejecutar(miEquipo,infoCompmov ); 
    System.out.println( "\n"+agentId +" EJECUTO LA REGLA: "+drools.getRule().getName()+"\n\n" );
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());      
end

